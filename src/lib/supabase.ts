import { createClient } from '@supabase/supabase-js'

// ‰ªéÁéØÂ¢ÉÂèòÈáèËé∑ÂèñÈÖçÁΩÆÔºåÂ¶ÇÊûúÊ≤°ÊúâÂàô‰ΩøÁî®Âç†‰ΩçÁ¨¶
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://placeholder.supabase.co'
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'placeholder-key'

// Ê£ÄÊü•ÊòØÂê¶‰∏∫Âç†‰ΩçÁ¨¶ÈÖçÁΩÆ
const isPlaceholderConfig = supabaseUrl === 'https://placeholder.supabase.co' || supabaseAnonKey === 'placeholder-key'

// ÂàõÂª∫SupabaseÂÆ¢Êà∑Á´ØÔºàÂç≥‰Ωø‰ΩøÁî®Âç†‰ΩçÁ¨¶‰πüÂàõÂª∫Ôºå‰ª•ÈÅøÂÖçÂ∫îÁî®Â¥©Ê∫ÉÔºâ
export const supabase = createClient(supabaseUrl, supabaseAnonKey)

// ÂØºÂá∫ÈÖçÁΩÆÁä∂ÊÄÅÔºå‰æõÂÖ∂‰ªñÁªÑ‰ª∂‰ΩøÁî®
export const isSupabaseConfigured = !isPlaceholderConfig

// Â¶ÇÊûú‰ΩøÁî®Âç†‰ΩçÁ¨¶ÈÖçÁΩÆÔºåÂú®ÊéßÂà∂Âè∞ËæìÂá∫ÊèêÁ§∫‰ø°ÊÅØ
if (isPlaceholderConfig) {
  console.warn('‚ö†Ô∏è SupabaseÈÖçÁΩÆÊú™ËÆæÁΩÆÔºåÊ≠£Âú®‰ΩøÁî®fallbackÊµãËØïÊï∞ÊçÆ')
  console.warn('üìñ ËØ∑ÂèÇËÄÉSETUP_GUIDE.mdÈÖçÁΩÆSupabaseËøûÊé•')
}

// Ëé∑ÂèñÊâÄÊúâÊ∏∏Êàè
export async function getGames() {
  try {
    const { data, error } = await supabase
      .from('games')
      .select('*')
      .eq('is_active', true)
      .order('created_at', { ascending: false })

    if (error) {
      console.error('Error fetching games:', error)
      return []
    }

    return data || []
  } catch (error) {
    console.error('Error in getGames:', error)
    return []
  }
}

// Ëé∑ÂèñÊåáÂÆöÊ∏∏ÊàèÁöÑÊâÄÊúâÂç°ÁâáID
export async function getGameCardIds(gameId) {
  try {
    const { data, error } = await supabase
      .from('cards')
      .select('id')
      .eq('game_id', gameId)
      .eq('is_active', true)

    if (error) {
      console.error('Error fetching game card IDs:', error)
      return []
    }

    return data?.map(card => card.id) || []
  } catch (error) {
    console.error('Error in getGameCardIds:', error)
    return []
  }
}

// Ê†πÊçÆIDËé∑ÂèñÂç°Áâá
export async function getCardById(cardId) {
  try {
    const { data, error } = await supabase
      .from('cards')
      .select('*')
      .eq('id', cardId)
      .eq('is_active', true)
      .single()

    if (error) {
      console.error('Error fetching card by ID:', error)
      return null
    }

    return data
  } catch (error) {
    console.error('Error in getCardById:', error)
    return null
  }
}